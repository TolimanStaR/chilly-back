services:

  main_db:
    image: postgres:alpine
    volumes:
      - main_pg_volume:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: "${MAIN_DB}"
      POSTGRES_USER: "${MAIN_USER}"
      POSTGRES_PASSWORD: "${MAIN_PASSWORD}"
    restart: unless-stopped
    command:
      - "-p ${MAIN_DB_PORT}"
    ports:
      - "${MAIN_DB_PORT}:${MAIN_DB_PORT}"
    networks:
      - chilly-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${MAIN_USER} -d ${MAIN_DB} -p ${MAIN_DB_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 7s

  security_db:
    image: postgres:alpine
    volumes:
      - security_pg_volume:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: "${SEC_DB}"
      POSTGRES_USER: "${SEC_USER}"
      POSTGRES_PASSWORD: "${SEC_PASSWORD}"
    restart: unless-stopped
    command:
      - "-p ${SEC_DB_PORT}"
    ports:
      - "${SEC_DB_PORT}:${SEC_DB_PORT}"
    networks:
      - chilly-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SEC_USER} -d ${SEC_DB} -p ${SEC_DB_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 7s

  eureka:
    image: "tolimanstar/chilly_discovery_server:latest"
    build:
      context: ./
      dockerfile: ./discovery-server/Dockerfile
    expose:
      - "8761"
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILE_ACTIVE: docker
    networks:
      - chilly-net
    healthcheck:
      test: "curl --fail --silent --request GET http://eureka:8761/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 7s
      retries: 7
      start_period: 15s

  main:
    depends_on:
      main_db:
        condition: service_healthy
      eureka:
        condition: service_healthy
    image: "tolimanstar/chilly_main:latest"
    build:
      context: ./
      dockerfile: ./main-svc/Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MAIN_DB: "${MAIN_DB}"
      MAIN_HOST: main_db
      MAIN_USER: "${MAIN_USER}"
      MAIN_PASSWORD: "${MAIN_PASSWORD}"
      MAIN_DB_PORT: "${MAIN_DB_PORT}"
      GATEWAY_PORT: "${GATEWAY_PORT}"
    networks:
      - chilly-net

  security:
    depends_on:
      security_db:
        condition: service_healthy
      eureka:
        condition: service_healthy
    image: "tolimanstar/chilly_security:latest"
    build:
      context: ./
      dockerfile: ./security-svc/Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SEC_DB: "${SEC_DB}"
      SEC_HOST: security_db
      SEC_USER: "${SEC_USER}"
      SEC_PASSWORD: "${SEC_PASSWORD}"
      SEC_DB_PORT: "${SEC_DB_PORT}"
      JWT_SECRET_KEY: "${JWT_SECRET_KEY}"
      GATEWAY_PORT: "${GATEWAY_PORT}"
    networks:
      - chilly-net

  gateway:
    depends_on:
      eureka:
        condition: service_healthy
    image: "tolimanstar/cilly_gateway:latest"
    build:
      context: ./
      dockerfile: ./api-gateway/Dockerfile
    ports:
      - "${GATEWAY_PORT}:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      JWT_SECRET_KEY: "${JWT_SECRET_KEY}"
      GATEWAY_PORT: "${GATEWAY_PORT}"
    networks:
      - chilly-net
    healthcheck:
      test: "curl --fail --silent --request GET http://gateway:${GATEWAY_PORT}/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 7s
      retries: 7
      start_period: 15s

  rec:
    depends_on:
      eureka:
        condition: service_healthy
    image: "tolimanstar/chilly_rec:latest"
    ports:
      - "8000:8000"
    environment:
      EUREKA_URL: "http://eureka:8761"
      REC_HOST: rec
    networks:
      - chilly-net

volumes:
  main_pg_volume:
  security_pg_volume:

networks:
  chilly-net: {}